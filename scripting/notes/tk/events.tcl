#!/bin/sh
# events.tcl \
exec wish "$0" -name "events" "$@"

wm title . "tcl/tk events demo"

# We've already used interactive widgets with callbacks. However this allows
# only for very restrictive interfaces. The bind command extends that to
# - User input without associated widgets
# - Widget events -- when they are shown, destroyed, etc
# - Program-generated events

# This binds the escape key press (downstroke) to exit in main window and all
# it's slaves
bind . <KeyPress-Escape> exit

# This binds a modified key press
bind . <Control-Shift-KeyPress-F3> { puts "Very strange event" }

# KeyPress is optional if a key is given, so this also works
bind . <Escape> exit
bind . <Control-Shift-F3> { puts "Very strange event" }

# one can also bind letters except < and space as is
# This doesn't combine well with input fields though
bind . q { puts "Q!" }

# For virtual (program-generated) events <<>> is used
bind . <<TimeToGo>> { puts "Let's go!" }

# To restrict events to a certain widget, use the widget for bind.
# You can also use multiple presses for the event -- Double,Triple,Quadruple
label .l1 -relief solid -text { Triple-right-click here! }
bind .l1 <Triple-ButtonPress-3> {
    .l1 configure -text { You did it }

    # virutal events are generated by
    # Had to put it here, didn't get picked up from the preamble script
    event generate . <<TimeToGo>>
}
pack .l1 -side top -fill both

# Bind syntax is as follows: bind [where] [event] [reaction]
# where can be --
# a toplevel window, then the event is dispatched in that window
# a widget, then the event will be dispatched in that widget's zone
# a widget tag -- just button or label, meaning in all buttons or all labels
#   also has the value 'all' which means everywhere

# @NOTE: well acshually, there is only one form -- tagged. And window names are
# also tags. There is a way to control tags via the bindtags command.

# event can be
# -- plain, meaning a letter-key
# -- <<>> -- virtual, for event generate (which can actually gen any event)
# -- <> -- a descirption of an event separated by -

# Among different event types, there are not only user ones
# this will be called on configuration
bind .l1 <Configure> { puts "Configuring .l1" }

# Among others there are
# KeyPress, ButtonPress, KeyRelease, ButtonRelease, Motion, MouseWheel,
# FocusIn, FocusOut, Configure, Destroy

# For events that need keys, they can be found in the dosc.
# Some are Enter, Escape, F7, Tab, Shift_L, look in man 3tk keysims

# ButtonPress/ButtonRelease go with 1-5, where 1 is lmb, 2 is wheel, 3 is rmb

# Some modifiers for before the press/release can be
# Control, Shift, Alt, Double, Triple, Quadruple

# as the second param bind can also take multiple events. Then it requires
# for them to happen in succession
bind . {l s} { puts [exec ls] }

# For the script there are also specialties. Event params can be accessed
# through %. It is not a var, but will be substituted literally.

bind .l1 <ButtonPress> {
    puts "Pressed %b at (%x, %y)"
    # %k would be for key press
}

# Btw, basic widget reactions also go through the regular event dispatch
# If you put a break in a handler body not within a loop, all others will
# not run. Continue jumps to the next one.
